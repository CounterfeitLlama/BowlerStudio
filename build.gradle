/*
buildscript {
  repositories {
    maven {
      url 'https://plugins.gradle.org/m2/'
    }
  }
  dependencies {
    classpath 'gradle.plugin.edu.sc.seis.gradle:launch4j:1.6.1'
  }
}
*/

boolean is64Bit() {
	////System.out.println("Arch: "+getOsArch());
	return getOsArch().startsWith("x86_64") || getOsArch().startsWith("amd64");
}
 boolean isARM() {
	return getOsArch().startsWith("arm");
}
 boolean isCortexA8(){
	if(isARM()){
		//TODO check for cortex a8 vs arm9 generic
		return true;
	}
	return false;
}
 boolean isWindows() {
	////System.out.println("OS name: "+getOsName());
	return getOsName().toLowerCase().startsWith("windows") ||getOsName().toLowerCase().startsWith("microsoft") || getOsName().toLowerCase().startsWith("ms");
}

 boolean isLinux() {
	return getOsName().toLowerCase().startsWith("linux");
}

 boolean isOSX() {
	return getOsName().toLowerCase().startsWith("mac");
}

 String getExtension() {
	if(isWindows()) {
		return ".dll";
	}
	
	if(isLinux()) {
		return ".so";
	}
	
	if(isOSX()) {
		return ".jnilib";
	}
	
	return "";
}

String getOsName() {	
	return System.getProperty("os.name");
}

String getOsArch() {
	return System.getProperty("os.arch");
}

apply plugin: 'java'
apply plugin: 'signing'
apply plugin: 'maven'
apply plugin: 'application'
//apply plugin: 'edu.sc.seis.launch4j'

sourceCompatibility = '1.8'
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'
// NetBeans will automatically add "run" and "debug" tasks relying on the
// "mainClass" property. You may however define the property prior executing
// tasks by passing a "-PmainClass=<QUALIFIED_CLASS_NAME>" argument.
//
// Note however, that you may define your own "run" and "debug" task if you
// prefer. In this case NetBeans will not add these tasks but you may rely on
// your own implementation.
if (!hasProperty('mainClass')) {
	ext.mainClass = 'com.neuronrobotics.bowlerstudio.BowlerStudio'
}
File buildDir = file(".");

configurations.all {
	exclude module: 'slf4j-log4j12'
}
sourceSets {
	
	test {
		java {
			srcDirs = ["test/java/src" ]  // Note @Peter's comment below
		}
	}
}
/*
launch4j {
  mainClassName = ext.mainClass
  icon = buildDir.getAbsolutePath()+"/src/main/resources/NeuronRobotics.ico"
}
*/
Properties props = new Properties()
props.load(new FileInputStream(buildDir.getAbsolutePath()+"/src/main/resources/com/neuronrobotics/bowlerstudio/build.properties"))



repositories {
	mavenCentral()
	maven { url 'https://repository-bubblecloud.forge.cloudbees.com/release/'}
	maven { url 'https://clojars.org/repo' }
	maven { url 'https://oss.sonatype.org/content/repositories/releases/'  }
	maven { url 'https://jline.sourceforge.net/m2repo' }
	maven { url 'https://repo.spring.io/milestone'}
	maven { url 'https://oss.sonatype.org/content/repositories/snapshots/'  }
	maven { url 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'  }
	maven { url 'https://jenkinsci.artifactoryonline.com/jenkinsci/public/' }
	maven { url 'https://plugins.gradle.org/m2/' }
	maven { url 'https://dl.bintray.com/clearcontrol/ClearControl' }
	 maven { url "https://jitpack.io" }
}

dependencies {
	//compile "com.neuronrobotics:JavaCad:0.8.2"
	compile group: 'jfree', name: 'jfreechart', version: '1.0.12'
	compile "com.neuronrobotics:BowlerScriptingKernel:0.24.2"
	//compile fileTree (dir: '../bowler-script-kernel/build/libs', includes: ['BowlerScriptingKernel-0.24.2.jar'])
	testCompile group: 'junit', name: 'junit', version: '4.10'
	//compile "org.jfxtras:jfxtras-common:8.0-r4"
	//compile "org.jfxtras:jfxtras-fxml:8.0-r4"
	//compile "org.jfxtras:jfxtras-controls:8.0-r4"
	//compile "org.jfxtras:jfxtras-agenda:8.0-r4"
	//compile "org.jfxtras:jfxtras-window:8.0-r4"
	//compile "org.jfxtras:jfxtras-menu:8.0-r4"
	//compile "org.jfxtras:jfxtras-labs:8.0-r4"
	compile 'org.dockfx:DockFX:0.1.7'
	//compile 'com.github.movisens:SmartGattLib:1.7'
	// https://mvnrepository.com/artifact/org.apache.xmlrpc/xmlrpc-client
	compile group: 'org.apache.xmlrpc', name: 'xmlrpc-client', version: '3.1.3'
	// https://mvnrepository.com/artifact/com.abercap/odoo-java-api
	//compile group: 'com.abercap', name: 'odoo-java-api', version: '1.1.0.RELEASE'
	//http://www.jocl.org/
	//compile group: 'org.jocl', name: 'jocl', version: '2.0.0'
	// https://mvnrepository.com/artifact/com.nativelibs4java/jnaerator
	//compile group: 'com.nativelibs4java', name: 'jnaerator', version: '0.11'
	// https://mvnrepository.com/artifact/com.github.kurbatov/firmata4j
	compile group: 'com.github.kurbatov', name: 'firmata4j', version: '2.3.1'


	compile fileTree (dir: 'libs/', includes: ['*.jar'])

}

// create a fat-jar (class files plus dependencies
// excludes VRL.jar (plugin jar files must not start with 'vrl-\\d+')
jar {
	//zip64 true
	jar.duplicatesStrategy = DuplicatesStrategy.EXCLUDE
	jar.baseName= "BowlerStudio";
	doFirst {
		
		// dependencies except VRL
		from (configurations.runtime.asFileTree.
				filter({file->return !file.name.startsWith("vrl-0")}).
				files.collect { zipTree(it) } ){
					exclude 'META-INF/MANIFEST.MF'
					exclude 'META-INF/*.SF'
					exclude 'META-INF/*.DSA'
					exclude 'META-INF/*.RSA'
				}
	}

	// project class files compiled from source
	//from files(sourceSets.main.output.classesDir)

	manifest {  
	    attributes(	
	    				"Main-Class": mainClass,
	    				"SplashScreen-Image": "com/neuronrobotics/nrconsole/images/splash.png",
		    			"Manifest-Version": "1.0",
		    			"Created-By": "Neuron Robotics Cooperative",
		    			"Specification-Title": props."app.name",
		    			"Specification-Version": props."app.version",
		    			"Specification-Vendor": "Neuron Robotics Cooperative",,
		    			"Implementation-Title": props."app.name",
		    			"Implementation-Version" : props."app.version",
		    			"Implementation-Vendor": "Neuron Robotics Cooperative"

		        		
		    )
		}
}



//task run(type: JavaExec) {
//	classpath = sourceSets.main.runtimeClasspath
//	main = mainClass;
//	//    jvmArgs = ['-Dprism.forceGPU=true', '-Dprism.verbose=true']
//	jvmArgs = ['-Dprism.forceGPU=true']
//}
